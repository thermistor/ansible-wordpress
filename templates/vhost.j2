server {

{% if wordpress_enable_https %}
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name {{ wordpress_site }} {{ wordpress_site_aliases|join(' ') }};

  # based on https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html and
  # also https://wiki.mozilla.org/Security/Server_Side_TLS
  ssl                  on;
  ssl_certificate      {{ wordpress_ssl_cert }};
  ssl_certificate_key  {{ wordpress_ssl_cert_key }};
  ssl_dhparam /etc/ssl/certs/dhparam.pem;

  ssl_ciphers "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA";
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:10m;
  ssl_stapling on;
  ssl_stapling_verify on;

  resolver 8.8.4.4 8.8.8.8 valid=300s;
  resolver_timeout 5s;

  add_header Strict-Transport-Security "max-age=31536000";

  if ( $host != '{{ wordpress_site }}' ) {
   rewrite ^ https://{{ wordpress_site }}$request_uri? permanent;
  }
{% else %}
  listen 80;
  listen [::]:80;

  # site aliases are handled by vhost_redirect for port 80
  server_name {{ wordpress_site }};
{% endif %}

  root {{ wordpress_dir }};

  index index.php;

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
    deny all;
  }
  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
  }

  # This order might seem weird - this is attempted to match last if rules below fail.
  # http://wiki.nginx.org/HttpCoreModule
  location / {
    try_files $uri $uri/ /index.php?$args;
  }

  # Add trailing slash to */wp-admin requests.
  rewrite /wp-admin$ $scheme://$host$uri/ permanent;

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
    break;
  }

  location ~ ^/(favicon|apple-touch|mstile).*\.(ico|png)$ {
    expires    1y;
    add_header Cache-Control public;

    add_header ETag "";
    access_log off;
    break;
  }

  location ~* ^.+\.(js|css)$ {
    expires 1y;
    add_header Cache-Control public;

    break;
  }

  # Directives to send expires headers and turn off 404 error logging.
  location ~* ^.+\.(ogg|ogv|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    expires 1y;
    add_header Cache-Control public;

    access_log off;
    log_not_found off;
    break;
  }

  # Uncomment one of the lines below for the appropriate caching plugin (if used).
  #include global/wordpress-wp-super-cache.conf;
  #include global/wordpress-w3-total-cache.conf;

  # Pass all .php files onto a php-fpm/php-fcgi server.
  location ~ [^/]\.php(/|$) {
    fastcgi_split_path_info ^(.+?\.php)(/.*)$;
    if (!-f $document_root$fastcgi_script_name) {
      return 404;
    }
    # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

    include fastcgi_params;
    fastcgi_index index.php;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    # fastcgi_intercept_errors on;
    # fastcgi_pass php;
    fastcgi_pass {{ wordpress_php_fpm_socket }};
  }

  access_log /var/log/nginx/{{ wordpress_shortname }}-access.log;
  error_log  /var/log/nginx/{{ wordpress_shortname }}-error.log;

}
